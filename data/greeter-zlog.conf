# 全局变量设置
[global]

# true(默认值):  zlog_init()将会严格检查配置文件，任何错误都会导致zlog_init() 失败并且返回-1；
# false:         zlog_init()会忽略错误的格式和规则。
strict init = true

# 这个选项让zlog能在一段时间间隔后自动重载配置文件。重载的间隔以每进程写日志的次数来定义。
# 当写日志次数到了一定值后，内部将会调用zlog_reload()进行重载。每次zlog_reload()或者zlog_init()之后重新计数累加。
# 因为zlog_reload()是原子性的，重载失败继续用当前的配置信息，所以自动重载是安全的。默认值是0，自动重载是关闭的。
reload conf period = 10M

# zlog在堆上为每个线程申请缓存。"buffer min"是单个缓存的最小值，zlog_init()的时候申请这个长度的内存。
# 写日志的时候，如果单条日志长度大于缓存，缓存会自动扩充，直到到"buffer max"。 单条日志再长超过"buffer max"就会被截断。
# 如果 "buffer max" 是 0，意味着不限制缓存，每次扩充为原先的2倍，直到这个进程用完所有内存为止。
# 缓存大小可以加上 KB, MB 或 GB这些单位。默认来说"buffer min"是 1K ， "buffer max" 是2MB。
buffer min = 1024
buffer max = 2MB

# 这个选项指定了一个锁文件，用来保证多进程情况下日志安全转档。zlog会在zlog_init()时候以读写权限打开这个文件。
# 确认你执行程序的用户有权限创建和读写这个文件。默认来说，rotate lock file = self。在这种情况下，zlog不会创建任何锁文件，用配置文件作为锁文件。
# rotate lock file = /tmp/zlog.lock
rotate lock file = self

# 日志输出的默认格式
default format = "%d(%F %T).%ms [%-6V] [%-30f %-30U %-4L] - %m%n"

# 这个指定了创建日志文件的缺省访问权限。必须注意的是最后的产生的日志文件的权限为"file perms"& ~umask。默认为600，只允许当前用户读写。
file perms = 600

# 在每条规则写了一定次数的日志到文件后，zlog会调用fsync(3)来让操作系统马上把数据写到硬盘。次数是每条规则单独统计的，并且在zlog_reload()后会被清0。
fsync period = 1K

# 自定义日志等级，语法：(level string) = (level int), (syslog level, optional) 
[levels]
COUT = 30 
CSYS = 70, LOG_INFO
CERR = 90

[formats]
simple = "%m%n"
# syslog已经带了时间和等级信息
sysformat = "[%-30f %-30U %-4L] - %m%n"

[rules]

*.=COUT                         >stdout;simple

*.=CSYS                         >syslog,LOG_LOCAL6;sysformat

*.=CERR                         >stderr;simple

kylinsec-greeter.INFO	        >stderr;
